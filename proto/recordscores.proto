syntax = "proto3";

package recordscores;

import "github.com/brotherlogic/recordcollection/proto/recordcollection.proto";

option go_package = "github.com/brotherlogic/recordscores/proto";

message Scores {
  repeated Score scores = 1;
  map<int32, ComputedScore> last_score = 2;
}

message Score {
  int32 instance_id = 1;
  int32 rating = 2;
  recordcollection.ReleaseMetadata.Category category = 3;
  int64 score_time = 4;
}

message ComputedScore {
  int32 base_rating = 1;
  repeated ScoreAdjustment adjustments = 2;
  float overall = 3;
  int32 curr_folder = 4;
}

message ScoreAdjustment {
  enum AdjustmentType {
    IGNORED_ADJUSTMENT = 0;
    OTHER_VERSIONS_ADJUSTMENT = 1;
    DIGITAL_VERSIONS_ADJUSTMENT = 2;
    OWN_OTHER_ADJUSTMENT = 3;
    PREVIOUSY_SOLD_ADJUSTMENT = 4;
  }
  AdjustmentType type = 1;
  float value_change = 2;
}

message GetScoreRequest {
  int32 instance_id = 1;
  recordcollection.ReleaseMetadata.Category category = 2;
}

message GetScoreResponse {
  repeated Score scores = 1;
  ComputedScore computed_score = 2;
}

service RecordScoreService {
  rpc GetScore(GetScoreRequest) returns (GetScoreResponse) {};
}