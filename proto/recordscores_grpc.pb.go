// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RecordScoreServiceClient is the client API for RecordScoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordScoreServiceClient interface {
	GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*GetScoreResponse, error)
}

type recordScoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordScoreServiceClient(cc grpc.ClientConnInterface) RecordScoreServiceClient {
	return &recordScoreServiceClient{cc}
}

func (c *recordScoreServiceClient) GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*GetScoreResponse, error) {
	out := new(GetScoreResponse)
	err := c.cc.Invoke(ctx, "/recordscores.RecordScoreService/GetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordScoreServiceServer is the server API for RecordScoreService service.
// All implementations should embed UnimplementedRecordScoreServiceServer
// for forward compatibility
type RecordScoreServiceServer interface {
	GetScore(context.Context, *GetScoreRequest) (*GetScoreResponse, error)
}

// UnimplementedRecordScoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordScoreServiceServer struct {
}

func (UnimplementedRecordScoreServiceServer) GetScore(context.Context, *GetScoreRequest) (*GetScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}

// UnsafeRecordScoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordScoreServiceServer will
// result in compilation errors.
type UnsafeRecordScoreServiceServer interface {
	mustEmbedUnimplementedRecordScoreServiceServer()
}

func RegisterRecordScoreServiceServer(s grpc.ServiceRegistrar, srv RecordScoreServiceServer) {
	s.RegisterService(&_RecordScoreService_serviceDesc, srv)
}

func _RecordScoreService_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordScoreServiceServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordscores.RecordScoreService/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordScoreServiceServer).GetScore(ctx, req.(*GetScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordScoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordscores.RecordScoreService",
	HandlerType: (*RecordScoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScore",
			Handler:    _RecordScoreService_GetScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordscores.proto",
}
